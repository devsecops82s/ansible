- name: create ec2 and r53 records
  hosts: local
  connection: local
  vars:
    subnet_id: subnet-089fb5465f98947da     # mandatory
    sg_id: sg-00690c7221308a207             # mandatory
    ami_id: ami-09c813fb71547fc4f           # mandatory
    instance_type: t3.micro                 # mandatory
    zone_name: bsdaws82s.site
    instances:
    - mysql
    - backend
    - frontend
  tasks:
  - name: install python  libraries
    ansible.builtin.pip:
      name: "{{ item }}"
      executable: pip3.9
    loop:
    - botocore
    - boto3

  - name: create ec2 instance 
    amazon.aws.ec2_instance:
      name: "{{ item }}"
      subnet_id: "{{ subnet_id }}"
      security_group: "{{ sg_id }}"
      image_id: "{{ ami_id }}"
      instance_type: "{{ instance_type }}"

    loop: "{{ instances }}"
    register: ec2_info

  - name: print ec2_info
    ansible.builtin.debug:
      msg: "{{ ec2_info }}"

  - name: print private ip adress
    ansiible.builtin.debug:
      msg: "{{ item.instance[0].private_ip_address}}"
    loop: "{{ ec2_info.results }}"

  - name: create route53 records
    amazon.aws.route53:
      state: present
      zone: "{{ zone_name }}"
      record: "{{ item.item }}.{{ zone_name }}"
      type: A
      ttl: 1
      value: "{{ item.instance[0].private_ip_address}}"
      wait: true
      overwrite: true
    loop: "{{ ec2_info.results }}"
    
  

  - name: create route53  public ip record
    amazon.aws.route53:
      state: present
      zone: "{{ zone_name }}"
      record: "{{ zone_name }}"
      type: A
      ttl: 1
      value: "{{ item.instance[0].public_ip_address}}"
      wait: true
      overwrite: true
    loop: "{{ ec2_info.results }}"
    when: item.item == "frontend"







    



    

    

